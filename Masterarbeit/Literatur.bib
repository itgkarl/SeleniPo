
@book{thaller_software-test_2002,
	location = {Hannover},
	edition = {2., aktualisierte und erw. Aufl.},
	title = {Software-Test},
	isbn = {3-88229-198-2},
	pagetotal = {{XI}, 383 S.},
	publisher = {Heise},
	author = {Thaller, Georg Erwin},
	date = {2002},
	file = {OPAC der Hochschule München:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\SDRTXECV\\singleHit.html:text/html}
}

@book{dustin_automated_1999,
	title = {Automated Software Testing: Introduction, Management, and Performance},
	isbn = {978-0-672-33384-2},
	shorttitle = {Automated Software Testing},
	abstract = {With the urgent demand for rapid turnaround on new software releases--without compromising quality--the testing element of software development must keep pace, requiring a major shift from slow, labor-intensive testing methods to a faster and more thorough automated testing approach.   Automated Software Testing is a comprehensive, step-by-step guide to the most effective tools, techniques, and methods for automated testing. Using numerous case studies of successful industry implementations, this book presents everything you need to know to successfully incorporate automated testing into the development process.   In particular, this book focuses on the Automated Test Life Cycle Methodology ({ATLM}), a structured process for designing and executing testing that parallels the Rapid Application Development methodology commonly used today. Automated Software Testing is designed to lead you through each step of this structured program, from the initial decision to implement automated software testing through test planning, execution, and reporting. Included are test automation and test management guidance for:   Acquiring management support Test tool evaluation and selection The automated testing introduction process Test effort and test team sizing Test team composition, recruiting, and management Test planning and preparation Test procedure development guidelines Automation reuse analysis and reuse library Best practices for test automation},
	pagetotal = {602},
	publisher = {Addison-Wesley Professional},
	author = {Dustin, Elfriede and Rashka, Jeff and Paul, John},
	date = {1999-06-28},
	langid = {english},
	keywords = {Computers / Software Development \& Engineering / General, Computers / Software Development \& Engineering / Quality Assurance \& Testing}
}

@book{fewster_software_1999,
	title = {Software Test Automation Effective use of test execution tools},
	isbn = {0-201-33140-3},
	publisher = {Addison-Wesley},
	author = {Fewster, Mark and Graham, Dorothy},
	date = {1999},
	file = {Software Test Automation.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\2NPA5325\\Software Test Automation.pdf:application/pdf}
}

@inproceedings{bouquet_test_2008,
	location = {New York, {NY}, {USA}},
	title = {A Test Generation Solution to Automate Software Testing},
	isbn = {978-1-60558-030-2},
	url = {http://doi.acm.org/10.1145/1370042.1370052},
	doi = {10.1145/1370042.1370052},
	series = {{AST} '08},
	abstract = {This paper describes the {LEIRIOS} Smart Testing™ approach to the functional validation of a subpart of the {StarUML} case study. This model-based testing process for test automation is shown from start to end: from functional requirements to the publication of generated tests in a test repository and automatic execution of scripts with a test execution robot. This is a short position paper illustrating how {LEIRIOS} Smart Testing" can help to answer to the question: how to automate the testing of {UML}/{MDA} platform {StarUML}.},
	pages = {45--48},
	booktitle = {Proceedings of the 3rd International Workshop on Automation of Software Test},
	publisher = {{ACM}},
	author = {Bouquet, Fabrice and Grandpierre, Christophe and Legeard, Bruno and Peureux, Fabien},
	urldate = {2014-11-17},
	date = {2008},
	keywords = {model-based testing, {OCL}, Software testing, {UML}},
	file = {ACM Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\XP5ZV8SC\\Bouquet et al. - 2008 - A Test Generation Solution to Automate Software Te.pdf:application/pdf}
}

@book{spillner_basiswissen_2007,
	location = {Heidelberg},
	edition = {3. Aufl.},
	title = {Basiswissen Softwaretest},
	isbn = {3-89864-358-1},
	pagetotal = {{XV}, 228 S. : Ill., graph. Darst.},
	publisher = {dpunkt-Verl.},
	author = {Spillner, Andreas and Linz, Tilo},
	date = {2007},
	file = {OPAC der Hochschule München:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\BRKJ2KR2\\singleHit.html:text/html}
}

@book{dustin_software_2001,
	location = {Berlin [u.a.]},
	title = {Software automatisch testen},
	isbn = {978-3-540-67639-3},
	series = {Xpert.press},
	pagetotal = {{XXIII}, 649 S.},
	publisher = {Springer},
	author = {Dustin, Elfriede},
	date = {2001},
	file = {OPAC der Hochschule München:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\JSM5T78T\\search.html:text/html}
}

@inproceedings{memon_automated_2000,
	location = {New York, {NY}, {USA}},
	title = {Automated Test Oracles for {GUIs}},
	isbn = {1-58113-205-0},
	url = {http://doi.acm.org/10.1145/355045.355050},
	doi = {10.1145/355045.355050},
	series = {{SIGSOFT} '00/{FSE}-8},
	abstract = {Graphical User Interfaces ({GUIs}) are critical components of today's software. Because {GUIs} have different characteristics than traditional software, conventional testing techniques do not apply to {GUI} software. In previous work, we presented an approach to generate {GUI} test cases, which take the form of sequences of actions. In this paper we develop a test oracle technique to determine if a {GUI} behaves as expected for a given test case. Our oracle uses a formal model of a {GUI}, expressed as sets of objects, object properties, and actions. Given the formal model and a test case, our oracle automatically derives the expected state for every action in the test case. We represent the actual state of an executing {GUI} in terms of objects and their properties derived from the {GUI}'s execution. Using the actual state acquired from an execution monitor, our oracle automatically compares the expected and actual states after each action to verify the correctness of the {GUI} for the test case. We implemented the oracle as a component in our {GUI} testing system, called Planning Assisted Tester for {grapHical} user interface Systems ({PATHS}), which is based on {AI} planning. We experimentally evaluated the practicality and effectiveness of our oracle technique and report on the results of experiments to test and verify the behavior of our version of the Microsoft {WordPad}'s {GUI}.},
	pages = {30--39},
	booktitle = {Proceedings of the 8th {ACM} {SIGSOFT} International Symposium on Foundations of Software Engineering: Twenty-first Century Applications},
	publisher = {{ACM}},
	author = {Memon, Atif M. and Pollack, Martha E. and Soffa, Mary Lou},
	urldate = {2014-11-17},
	date = {2000},
	keywords = {automated oracles, {GUI} testing, {GUI} test oracles},
	file = {Test Oracles for GUIs.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\J6S4F2C2\\FSE2000.pdf:application/pdf}
}

@book{schwaber_agile_2002,
	location = {Upper Saddle River, {NJ}},
	edition = {Pearson Internat. Ed.},
	title = {Agile software development with Scrum},
	isbn = {978-0-13-207489-6},
	series = {Series in agile software development},
	pagetotal = {{XVI}, 158 S. : Ill., graph. Darst.},
	publisher = {Pearson Education International},
	author = {Schwaber, Ken},
	date = {2002},
	file = {OPAC der Hochschule München:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\WVSFDI9U\\search.html:text/html}
}

@inproceedings{meszaros_agile_2003,
	location = {New York, {NY}, {USA}},
	title = {Agile Regression Testing Using Record \& Playback},
	isbn = {1-58113-751-6},
	url = {http://doi.acm.org/10.1145/949344.949442},
	doi = {10.1145/949344.949442},
	series = {{OOPSLA} '03},
	abstract = {There are times when it is not practical to hand-script automated tests for an existing system before one starts to modify it (whether to refactor it to permit automated testing or to add new functionality). In these circumstances, the use of "record \& playback" testing may be a viable alternative to handwriting all the tests.This paper describes experiences using this approach and summarizes key learnings applicable to other projects.},
	pages = {353--360},
	booktitle = {Companion of the 18th Annual {ACM} {SIGPLAN} Conference on Object-oriented Programming, Systems, Languages, and Applications},
	publisher = {{ACM}},
	author = {Meszaros, Gerard},
	urldate = {2014-11-17},
	date = {2003},
	keywords = {acceptance test, Automated Testing, best practices, functional test, {JUnit}, patterns, playback, record, robot user, user interface, {XML}},
	annotation = {würfel},
	file = {ACM Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\9828HVRW\\Meszaros - 2003 - Agile Regression Testing Using Record & Playback.pdf:application/pdf;Agile Regression Testing Meszaros.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\ZW3CXBIS\\p353-meszaros.pdf:application/pdf}
}

@inproceedings{amannejad_search-based_2014,
	title = {A Search-Based Approach for Cost-Effective Software Test Automation Decision Support and an Industrial Case Study},
	doi = {10.1109/ICSTW.2014.34},
	abstract = {Test automation is a widely-used approach to reduce the cost of manual software testing. However, if it is not planned or conducted properly, automated testing would not necessarily be more cost effective than manual testing. Deciding what parts of a given System Under Test ({SUT}) should be tested in an automated fashion and what parts should remain manual is a frequently-asked and challenging question for practitioner testers. In this study, we propose a search-based approach for deciding what parts of a given {SUT} should be tested automatically to gain the highest Return On Investment ({ROI}). This work is the first systematic approach for this problem, and significance of our approach is that it considers automation in the entire testing process (i.e., from test-case design, to test scripting, to test execution, and test-result evaluation). The proposed approach has been applied in an industrial setting in the context of a software product used in the oil and gas industry in Canada. Among the results of the case study is that, when planned and conducted properly using our decision-support approach, test automation provides the highest {ROI}. In this study, we show that if automation decision is taken effectively, test-case design, test execution, and test evaluation can result in about 307\%, 675\%, and 41\% {ROI} in 10 rounds of using automated test suites.},
	eventtitle = {2014 {IEEE} Seventh International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	pages = {302--311},
	booktitle = {2014 {IEEE} Seventh International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	author = {Amannejad, Y. and Garousi, V. and Irving, R. and Sahaf, Z.},
	date = {2014-03},
	keywords = {action research, Automation, Context, cost-benefit analysis, cost-effective software test automation decision support approach, cost reduction, gas industry, industrial case study, investment, Manuals, oil industry, Optimization, program testing, return on investment, {ROI}, search-based approach, search-based software engineering, Software, software product, software product lines, software test automation, Software testing, {SUT}, system under test, test-case design, test evaluation, test execution},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\K8P44BJ8\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\4DC3EHVU\\Amannejad et al. - 2014 - A Search-Based Approach for Cost-Effective Softwar.pdf:application/pdf}
}

@inproceedings{richardson_specification-based_1992,
	title = {Specification-based test oracles for reactive systems},
	doi = {10.1109/ICSE.1992.753494},
	abstract = {The testing process is typically systematic in test data se- lection and test execution. For the most part, however, the effective use of test oracles has been neglected, even though they are a critical component of the testing process. Test or- acles prescribe acceptable behavior for test execution. In the absence of judging test results with formal oracles, testing does not achieve its goal of revealing failures or assuring cor- rect behavior in a practical manner; manual result checking is neither reliable nor cost-effective. We argue that test oracles should be derived from specifications in conjunction with testing criteria, represented in a common form, and their use made integral to the test- ing process. For complex, reactive systems, oracles must reflect the multiparadigm nature of the required behavior. Such systems are often specified using multiple languages, each selected for its utility specifying in a particular computational paradigm. Thus, we are developing an approach for deriving and using oracles based on multiparadigm and multilingual specifications to enable the verification of test results for reactive systems as well as less complex systems.},
	eventtitle = {International Conference on Software Engineering, 1992},
	pages = {105--118},
	booktitle = {International Conference on Software Engineering, 1992},
	author = {Richardson, D.J. and Aha, S.L. and O'Malley, T.O.},
	date = {1992},
	keywords = {Aerospace materials, Aircraft manufacture, Computer science, Distributed computing, Government, Machinery, Materials testing, Software systems, System testing},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\P6C7AC4E\\login.html:text/html;Specification-based Oracles.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\WP2DQMDI\\00753494.pdf:application/pdf}
}

@book{hoffmann_software-qualitat_2013,
	location = {Berlin},
	edition = {2013},
	title = {Software-Qualität},
	isbn = {978-3-540-76322-2},
	abstract = {Computerabstürze, Rückrufaktionen, Sicherheitslecks: Software-Fehler sind fast schon ein alltägliches Problem. Qualitätssicherung wird damit zu einer immer wichtigeren Aufgabe. Das Buch führt umfassend und praxisnah in die Software-Qualitätssicherung ein. Zunächst werden typische Fehlerquellen der Programmentwicklung erörtert, um anschließend Methoden und Techniken zur Qualitätssteigerung vorzustellen. Der Band behandelt die zentralen Fragen der konstruktiven und analytischen Qualitätssicherung, der Software-Infrastruktur und der Managementprozesse.},
	pagetotal = {568},
	publisher = {Springer},
	author = {Hoffmann, Dirk W.},
	date = {2013},
	file = {bok%3A978-3-642-35700-8.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\IB93RSJ7\\bok%3A978-3-642-35700-8.pdf:application/pdf;Software-Qualität - Dirk W. Hoffmann - Google Books:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\ZNX63R5X\\books.html:text/html}
}

@inproceedings{harrold_testing:_2000,
	location = {New York, {NY}, {USA}},
	title = {Testing: A Roadmap},
	isbn = {1-58113-253-0},
	url = {http://doi.acm.org/10.1145/336512.336532},
	doi = {10.1145/336512.336532},
	series = {{ICSE} '00},
	shorttitle = {Testing},
	pages = {61--72},
	booktitle = {Proceedings of the Conference on The Future of Software Engineering},
	publisher = {{ACM}},
	author = {Harrold, Mary Jean},
	urldate = {2014-10-28},
	date = {2000},
	file = {ACM Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\EQMVHSZS\\Harrold - 2000 - Testing A Roadmap.pdf:application/pdf}
}

@book{seidl_basiswissen_2012,
	location = {Heidelberg},
	edition = {1. Aufl.},
	title = {Basiswissen Testautomatisierung},
	isbn = {978-3-89864-724-3},
	publisher = {dpunkt-Verl.},
	author = {Seidl, Richard and Baumgartner, Manfred and Bucsics, Thomas},
	date = {2012},
	file = {DNB, Katalog der Deutschen Nationalbibliothek:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\BMBBCPSF\\opac.htm\;jsessionid=F4D0B30606E625D626658326B84285D7.html:text/html}
}

@misc{ieee_ieee_2008,
	title = {{IEEE} Std 829-2008 {IEEE} Standard for Software and System Test Documentation},
	shorttitle = {{IEEE} Std 829-2008},
	author = {{IEEE}},
	date = {2008-07}
}

@inproceedings{shahamiri_comparative_2009,
	title = {A Comparative Study on Automated Software Test Oracle Methods},
	doi = {10.1109/ICSEA.2009.29},
	abstract = {Software testing has been used to find software faults in order to improve its quality. To verify the software behavior, testers require test oracle. Test oracle is a reliable source of expected software behavior that provides outputs for any input specified in the software specifications and a comparator to verify actual results. While test automation requires automated oracle support, oracle automation is considered as a challenging task. These challenges are from the automation required in expected output generation and results verification. This paper presents oracle activities and the challenges to prepare automated oracle. Then a comparative study of existing automated oracle and expected output generation methods is provided. Finally, a classification of these methods is suggested based on how these methods provide automated test oracle and the tool they used. The classification explains which oracle activities will be automated by the proposed approaches.},
	eventtitle = {Fourth International Conference on Software Engineering Advances, 2009. {ICSEA} '09},
	pages = {140--145},
	booktitle = {Fourth International Conference on Software Engineering Advances, 2009. {ICSEA} '09},
	author = {Shahamiri, S.R. and Kadir, W.M.N.W. and Mohd-Hashim, S.Z.},
	date = {2009-09},
	keywords = {automated software testing, automated software test oracle methods, Automated Test Oracle, Automatic testing, Collaborative software, Costs, Databases, Expected Output Generation, expected output generation methods, oracle activities, oracle automation, Programming, program testing, Scheduling, software behavior verifiaction, software engineering, software faults, software specifications, Software testing, Sorting, Taxonomy, Uncertainty},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\3RRNK849\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\N2Q4TBQK\\Shahamiri et al. - 2009 - A Comparative Study on Automated Software Test Ora.pdf:application/pdf}
}

@misc{iso/iec_iso/iec_2001,
	title = {{ISO}/{IEC} 9126. Software engineering -- Product quality},
	publisher = {{ISO}/{IEC}},
	author = {{ISO}/{IEC}},
	date = {2001},
	file = {ISO/IEC 9126. Software engineering -- Product quality (bibtex):C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\S6SU3ZA5\\bibtexbrowser.html:text/html}
}

@article{ieee_ieee_1991,
	title = {{IEEE} Standard Computer Dictionary: A Compilation of {IEEE} Standard Computer Glossaries},
	doi = {10.1109/IEEESTD.1991.106963},
	shorttitle = {{IEEE} Standard Computer Dictionary},
	abstract = {Identifies terms currently in use in the computer field. Standard definitions for thoseterms are established. Compilation of {IEEE} Stds {IEEE} Std 1084, {IEEE} Std 610.2, {IEEE} Std 610.3, {IEEE} Std 610.4, {IEEE} Std 610.5 and {IEEE} Std 610.12},
	pages = {1--217},
	journaltitle = {{IEEE} Std 610},
	author = {{IEEE}},
	date = {1991-01},
	keywords = {610, applications, computer, computer field, definitions, dictionary, glossaries, glossary, terminology}
}

@inproceedings{royce_managing_1987,
	location = {Los Alamitos, {CA}, {USA}},
	title = {Managing the Development of Large Software Systems: Concepts and Techniques},
	isbn = {978-0-89791-216-7},
	url = {http://dl.acm.org/citation.cfm?id=41765.41801},
	series = {{ICSE} '87},
	shorttitle = {Managing the Development of Large Software Systems},
	pages = {328--338},
	booktitle = {Proceedings of the 9th International Conference on Software Engineering},
	publisher = {{IEEE} Computer Society Press},
	author = {Royce, W. W.},
	urldate = {2015-07-13},
	date = {1987},
	file = {p328-royce.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\6TB73GSI\\p328-royce.pdf:application/pdf}
}

@inproceedings{ramler_economic_2006,
	location = {New York, {NY}, {USA}},
	title = {Economic Perspectives in Test Automation: Balancing Automated and Manual Testing with Opportunity Cost},
	isbn = {1-59593-408-1},
	url = {http://doi.acm.org/10.1145/1138929.1138946},
	doi = {10.1145/1138929.1138946},
	series = {{AST} '06},
	shorttitle = {Economic Perspectives in Test Automation},
	pages = {85--91},
	booktitle = {Proceedings of the 2006 International Workshop on Automation of Software Test},
	publisher = {{ACM}},
	author = {Ramler, Rudolf and Wolfmaier, Klaus},
	urldate = {2014-10-28},
	date = {2006},
	keywords = {Automated Testing, benefits and costs of automation, manual testing, testing economics},
	file = {Economic Perspectives in Test Automation\: Balancing Automated and Manual Testing with Opportunity Cost - p85.pdf:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\CW39KC65\\p85.pdf:application/pdf}
}

@misc{prof._dr._r._lindermeier_projekt-_2006,
	title = {Projekt- und Qualitätsmanagement Softwarequalität und Softwareprüfung},
	author = {{Prof. Dr. R. Lindermeier}},
	date = {2006}
}

@online{oracle_client_2015,
	title = {Client Technologies: Java Platform, Standard Edition (Java {SE}) 8 Release 8},
	url = {http://docs.oracle.com/javafx},
	author = {{Oracle}},
	urldate = {2015-11-16},
	date = {2015-11-16},
	file = {Client Technologies\: Java Platform, Standard Edition (Java SE) 8 Release 8:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\HSRH593Z\\javase-clienttechnologies.html:text/html}
}

@inproceedings{leotta_repairing_2013,
	title = {Repairing Selenium Test Cases: An Industrial Case Study about Web Page Element Localization},
	doi = {10.1109/ICST.2013.73},
	shorttitle = {Repairing Selenium Test Cases},
	abstract = {This poster presents an industrial case study about test automation and test suite maintenance in the context of Web applications. The Web application under test is a Learning Content Management System ({eXact} learning {LCMS}). We analysed the costs associated with the realignment of four equivalent Selenium {WebDriver} test suites, implemented using the page object pattern and different methods to locate web page elements, to a subsequent release of {eXact} learning {LCMS}. In our study, the two {ID}-based test suites required significantly less maintenance effort than the {XPath}-based ones.},
	eventtitle = {2013 {IEEE} Sixth International Conference on Software Testing, Verification and Validation ({ICST})},
	pages = {487--488},
	booktitle = {2013 {IEEE} Sixth International Conference on Software Testing, Verification and Validation ({ICST})},
	author = {Leotta, M. and Clerissi, D. and Ricca, F. and Spadaro, C.},
	date = {2013-03},
	keywords = {Automation, Computer languages, content management, Context, cost analysis, costing, {eXact} learning {LCMS}, {ID}-based test suites, industrial case study, Internet, learning content management system, Maintenance engineering, Navigation, Page Object Pattern, program testing, Selenium {WebDriver}, Selenium {WebDriver} test suites, Software maintenance, Test Automation, Testing, Test Suite Maintainability, test suite maintenance, Web applications, Web Application Testing, Web page element location, Web pages},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\ZCX4VKUZ\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\RE7QDXAV\\Leotta et al. - 2013 - Repairing Selenium Test Cases An Industrial Case .pdf:application/pdf}
}

@online{hp_testautomatisierung_2015,
	title = {Testautomatisierung, Unified Functional Testing, {UFT} {\textbar} {HP}® Deutschland},
	url = {http://www8.hp.com/de/de/software-solutions/unified-functional-automated-testing/},
	author = {{HP}},
	urldate = {2015-08-11},
	date = {2015-08-11},
	file = {Testautomatisierung, Unified Functional Testing, UFT | HP® Deutschland:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\HVH5IM2Z\\unified-functional-automated-testing.html:text/html}
}

@online{selenium_selenium_2015,
	title = {Selenium Documentation},
	url = {http://www.seleniumhq.org/docs/},
	author = {{Selenium}},
	urldate = {2015-08-31},
	date = {2015-08-31},
	file = {Selenium Documentation — Selenium Documentation:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\3HDKJWAA\\docs.html:text/html}
}

@online{apache_software_foundation_apache_2015,
	title = {Apache Velocity Site - The Apache Velocity Project},
	url = {http://velocity.apache.org/},
	author = {{Apache Software Foundation}},
	urldate = {2015-11-16},
	date = {2015-11-16},
	file = {Apache Velocity Site - The Apache Velocity Project:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\FRMFCWUP\\velocity.apache.org.html:text/html}
}

@online{hedley_jsoup_2015,
	title = {jsoup Java {HTML} Parser, with best of {DOM}, {CSS}, and jquery},
	url = {http://jsoup.org/},
	author = {Hedley, Jonathan},
	urldate = {2015-11-24},
	date = {2015-11-24},
	file = {jsoup Java HTML Parser, with best of DOM, CSS, and jquery:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\CBJRBFGJ\\jsoup.org.html:text/html}
}

@inproceedings{stocco_why_2015,
	title = {Why Creating Web Page Objects Manually If It Can Be Done Automatically?},
	doi = {10.1109/AST.2015.26},
	abstract = {Page Object is a design pattern aimed at making web test scripts more readable, robust and maintainable. The effort to manually create the page objects needed for a web application may be substantial and unfortunately existing tools do not help web developers in such task. In this paper we present {APOGEN}, a tool for the automatic generation of page objects for web applications. Our tool automatically derives a testing model by reverse engineering the target web application and uses a combination of dynamic and static analysis to generate Java page objects for the popular Selenium {WebDriver} framework. Our preliminary evaluation shows that it is possible to use around 3/4 of the automatic page object methods as they are, while the remaining 1/4 need only minor modifications.},
	eventtitle = {2015 {IEEE}/{ACM} 10th International Workshop on Automation of Software Test ({AST})},
	pages = {70--74},
	booktitle = {2015 {IEEE}/{ACM} 10th International Workshop on Automation of Software Test ({AST})},
	author = {Stocco, A. and Leotta, M. and Ricca, F. and Tonella, P.},
	date = {2015-05},
	keywords = {{APOGEN}, Automation, design pattern, dynamic analysis, Indexes, Internet, Java, Java page objects, Manuals, Navigation, Page Object Pattern, Program Analysis, reverse engineering, Selenium {WebDriver}, Selenium {WebDriver} framework, static analysis, target Web application, Testing, Testware Evolution, Web developers, Web page objects, Web pages, Web test, Web Testing},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\WWDI5NE6\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\7G5WECTH\\Stocco et al. - 2015 - Why Creating Web Page Objects Manually If It Can B.pdf:application/pdf}
}

@book{rossner_basiswissen_2010,
	location = {Heidelberg},
	edition = {1. Aufl.},
	title = {Basiswissen modellbasierter Test},
	isbn = {978-3-89864-589-8},
	pagetotal = {{XX}, 404 S.},
	publisher = {dpunkt-Verl.},
	author = {Rossner, Thomas},
	date = {2010},
	file = {OPAC der Hochschule München:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\5984PK46\\search.html:text/html}
}

@inproceedings{leotta_improving_2013,
	title = {Improving Test Suites Maintainability with the Page Object Pattern: An Industrial Case Study},
	doi = {10.1109/ICSTW.2013.19},
	shorttitle = {Improving Test Suites Maintainability with the Page Object Pattern},
	abstract = {The page object pattern is used in the context of web testing for abstracting the application's web pages in order to reduce the coupling between test cases and application under test. This paper reports on an industrial case study in a small Italian company ({eXact} learning solutions S.p.A.) investigating the potential benefits of adopting the page object pattern to improve the maintainability of Selenium {WebDriver} test cases. After a maintenance/evolution activity performed on the application under test, we compared two equivalent test suites, one built using the page object pattern and one without it. The results of our case study indicate a strong reduction in terms of time required (by a factor of about three) and number of modified {LOCs} (by a factor of about eight) to repair the test suite when the page object pattern is used.},
	eventtitle = {2013 {IEEE} Sixth International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	pages = {108--113},
	booktitle = {2013 {IEEE} Sixth International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	author = {Leotta, M. and Clerissi, D. and Ricca, F. and Spadaro, C.},
	date = {2013-03},
	keywords = {Automation, Browsers, industrial case study, Internet, Maintenance engineering, Page Object Pattern, pattern recognition, program testing, Search problems, Selenium {WebDriver}, Selenium {WebDriver} test cases, Software, Test Automation, Testing, Test Suite Maintainability, test suites maintainability, Web Application Testing, Web pages, Web sites, Web Testing},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\FSA53RVE\\abs_all.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\HEKFWPWA\\Leotta et al. - 2013 - Improving Test Suites Maintainability with the Pag.pdf:application/pdf}
}

@online{selenium_selenium_2015-1,
	title = {Selenium - Test Design Considerations},
	url = {http://www.seleniumhq.org/docs/06_test_design_considerations.jsp},
	author = {{Selenium}},
	urldate = {2015-09-29},
	date = {2015-09-29},
	file = {Test Design Considerations — Selenium Documentation:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\8T6MKWAR\\06_test_design_considerations.html:text/html}
}

@online{joe_walnes_xstream_2015,
	title = {{XStream} - About {XStream}},
	url = {http://x-stream.github.io/},
	author = {{Joe Walnes}},
	urldate = {2015-11-16},
	date = {2015-11-16},
	file = {XStream - About XStream:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\G4A3X89W\\x-stream.github.io.html:text/html}
}

@online{daniel_wiredrive/wtframework_2015,
	title = {wiredrive/wtframework},
	url = {https://github.com/wiredrive/wtframework},
	abstract = {wtframework - Framework for configurable Web Tests in Python.},
	titleaddon = {{GitHub}},
	author = {Daniel, Bondurant and London, Kevin},
	urldate = {2015-10-20},
	date = {2015-10-20},
	file = {Snapshot:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\BCCBTZGV\\WTF-PageObject-Utility-Chrome-Extension.html:text/html}
}

@online{r._m._hierons_specification_????,
	title = {Specification Based Testing and Model Based Testing},
	url = {http://www.brunel.ac.uk/~csstrmh/research/specification_based_testing.html},
	author = {{R. M. Hierons}},
	urldate = {2015-08-02},
	file = {Specification Based Testing and Model Based Testing:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\PIWNETKE\\specification_based_testing.html:text/html}
}

@online{virtuetech_gmbh_ohmap_2015,
	title = {{OHMAP} - Create page objects faster than ever before},
	url = {http://ohmap.virtuetech.de/},
	author = {{virtuetech GmbH}},
	urldate = {2015-10-20},
	date = {2015-10-20},
	file = {OHMAP - Create page objects faster than ever before:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\KFGH72XH\\ohmap.virtuetech.de.html:text/html}
}

@online{silk_test_borland_2015,
	title = {Borland {\textbar} Silk Test: Automation testing tool},
	url = {http://www.borland.com/Products/Software-Testing/Automated-Testing/Silk-Test},
	author = {{Silk Test}},
	urldate = {2015-08-11},
	date = {2015-08-11},
	file = {Borland | Silk Test\: Automation testing tool:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\Q7HE34QC\\Silk-Test.html:text/html}
}

@online{dmytro_zharii_dzharii/swd-recorder_2015,
	title = {dzharii/swd-recorder},
	url = {https://github.com/dzharii/swd-recorder},
	abstract = {swd-recorder - Selenium {WebDriver} Page Recorder (Page Objects)},
	titleaddon = {{GitHub}},
	author = {{Dmytro Zharii}},
	urldate = {2015-10-20},
	date = {2015-10-20},
	file = {Snapshot:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\DPVZ2A46\\swd-recorder.html:text/html}
}

@online{httpunit_httpunit_2015,
	title = {{HttpUnit} Home},
	url = {http://httpunit.sourceforge.net/},
	author = {{HttpUnit}},
	urldate = {2015-08-11},
	date = {2015-08-11},
	file = {HttpUnit Home:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\PGN8K23D\\httpunit.sourceforge.net.html:text/html}
}

@online{selenium_selenium_2015-2,
	title = {Selenium - Web Browser Automation},
	url = {http://www.seleniumhq.org/},
	author = {{Selenium}},
	urldate = {2015-08-11},
	date = {2015-08-11},
	file = {Selenium - Web Browser Automation:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\JRAA4G9N\\www.seleniumhq.org.html:text/html}
}

@misc{iso/iec_iso/iec_2011,
	title = {{ISO}/{IEC}  25010:2011 - Systems and software engineering -- Systems and software Quality Requirements and Evaluation ({SQuaRE}) -- System and software quality models},
	url = {http://www.iso.org/iso/catalogue_detail.htm?csnumber=35733},
	author = {{ISO/IEC}},
	urldate = {2015-12-15},
	date = {2011},
	file = {ISO/IEC 25010\:2011 - Systems and software engineering -- Systems and software Quality Requirements and Evaluation (SQuaRE) -- System and software quality models:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\7N4CFGPI\\catalogue_detail.html:text/html}
}

@online{johner_iso_????,
	title = {{ISO} 9126 und {ISO} 25010},
	url = {https://www.johner-institut.de/blog/iec-62304-medizinische-software/iso-9126-und-iso-25010/},
	abstract = {Die {ISO} 9125 und deren Nachfolgenorm die {ISO} 25010 definieren eine Taxonomie von Software-Qualitätseigenschaften. Die {IEC} 62304 nimmt auf die {ISO} 9126 Bezug},
	titleaddon = {Wissen zu medizinischer Software},
	author = {Johner, Christian},
	urldate = {2015-12-22},
	file = {Snapshot:C\:\\Users\\admin\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\fzgyck2c.default\\zotero\\storage\\2KNRBRXG\\iso-9126-und-iso-25010.html:text/html}
}